/*
 * WaveSpeed AI API
 * API for generating images using WaveSpeed AI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.wavespeed.openapi.client.api;

import ai.wavespeed.openapi.client.ApiCallback;
import ai.wavespeed.openapi.client.ApiClient;
import ai.wavespeed.openapi.client.ApiException;
import ai.wavespeed.openapi.client.ApiResponse;
import ai.wavespeed.openapi.client.Configuration;
import ai.wavespeed.openapi.client.Pair;
import ai.wavespeed.openapi.client.ProgressRequestBody;
import ai.wavespeed.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.wavespeed.openapi.client.model.CreatePrediction400Response;
import ai.wavespeed.openapi.client.model.CreatePrediction401Response;
import ai.wavespeed.openapi.client.model.CreatePrediction500Response;
import ai.wavespeed.openapi.client.model.PredictionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPrediction
     * @param modelId The ID of the model to use for image generation (required)
     * @param requestBody  (required)
     * @param webhook The URL to which the webhook will be sent (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPredictionCall(String modelId, Map<String, Object> requestBody, String webhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{model_id}"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webhook != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook", webhook));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPredictionValidateBeforeCall(String modelId, Map<String, Object> requestBody, String webhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling createPrediction(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createPrediction(Async)");
        }

        return createPredictionCall(modelId, requestBody, webhook, _callback);

    }

    /**
     * Generate an image using the specified model
     * This endpoint generates an image based on the provided parameters. The &#x60;model_id&#x60; is a required path parameter specifying the model to use. The request body can contain various key-value pairs to customize the model generation process. 
     * @param modelId The ID of the model to use for image generation (required)
     * @param requestBody  (required)
     * @param webhook The URL to which the webhook will be sent (optional)
     * @return PredictionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PredictionResponse createPrediction(String modelId, Map<String, Object> requestBody, String webhook) throws ApiException {
        ApiResponse<PredictionResponse> localVarResp = createPredictionWithHttpInfo(modelId, requestBody, webhook);
        return localVarResp.getData();
    }

    /**
     * Generate an image using the specified model
     * This endpoint generates an image based on the provided parameters. The &#x60;model_id&#x60; is a required path parameter specifying the model to use. The request body can contain various key-value pairs to customize the model generation process. 
     * @param modelId The ID of the model to use for image generation (required)
     * @param requestBody  (required)
     * @param webhook The URL to which the webhook will be sent (optional)
     * @return ApiResponse&lt;PredictionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionResponse> createPredictionWithHttpInfo(String modelId, Map<String, Object> requestBody, String webhook) throws ApiException {
        okhttp3.Call localVarCall = createPredictionValidateBeforeCall(modelId, requestBody, webhook, null);
        Type localVarReturnType = new TypeToken<PredictionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an image using the specified model (asynchronously)
     * This endpoint generates an image based on the provided parameters. The &#x60;model_id&#x60; is a required path parameter specifying the model to use. The request body can contain various key-value pairs to customize the model generation process. 
     * @param modelId The ID of the model to use for image generation (required)
     * @param requestBody  (required)
     * @param webhook The URL to which the webhook will be sent (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPredictionAsync(String modelId, Map<String, Object> requestBody, String webhook, final ApiCallback<PredictionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPredictionValidateBeforeCall(modelId, requestBody, webhook, _callback);
        Type localVarReturnType = new TypeToken<PredictionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrediction
     * @param predictionId The ID of the prediction request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictionCall(String predictionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/predictions/{predictionId}/result"
            .replace("{" + "predictionId" + "}", localVarApiClient.escapeString(predictionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPredictionValidateBeforeCall(String predictionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'predictionId' is set
        if (predictionId == null) {
            throw new ApiException("Missing the required parameter 'predictionId' when calling getPrediction(Async)");
        }

        return getPredictionCall(predictionId, _callback);

    }

    /**
     * Retrieve the result of a prediction
     * This endpoint retrieves the result of a prediction based on the provided request ID. 
     * @param predictionId The ID of the prediction request (required)
     * @return PredictionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PredictionResponse getPrediction(String predictionId) throws ApiException {
        ApiResponse<PredictionResponse> localVarResp = getPredictionWithHttpInfo(predictionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the result of a prediction
     * This endpoint retrieves the result of a prediction based on the provided request ID. 
     * @param predictionId The ID of the prediction request (required)
     * @return ApiResponse&lt;PredictionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionResponse> getPredictionWithHttpInfo(String predictionId) throws ApiException {
        okhttp3.Call localVarCall = getPredictionValidateBeforeCall(predictionId, null);
        Type localVarReturnType = new TypeToken<PredictionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the result of a prediction (asynchronously)
     * This endpoint retrieves the result of a prediction based on the provided request ID. 
     * @param predictionId The ID of the prediction request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image generation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictionAsync(String predictionId, final ApiCallback<PredictionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPredictionValidateBeforeCall(predictionId, _callback);
        Type localVarReturnType = new TypeToken<PredictionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
